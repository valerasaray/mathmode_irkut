# AUTOGENERATED FROM 'app/queries/create_along_node.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateAlongNodeResult(NoPydanticValidation):
    id: uuid.UUID
    along: CreateAlongNodeResultAlong | None


@dataclasses.dataclass
class CreateAlongNodeResultAlong(NoPydanticValidation):
    id: uuid.UUID
    title: str


async def create_along_node(
    executor: edgedb.AsyncIOExecutor,
    *,
    title: str,
    department_id: uuid.UUID,
    node_id: uuid.UUID,
) -> CreateAlongNodeResult | None:
    return await executor.query_single(
        """\
        with title := <str>$title,
          department_id := <uuid>$department_id,
          node_id := <uuid>$node_id,
          cur_node := (select Node filter .addenable = true and .id = node_id)

        select (
          update cur_node
          set {
            addenable := false,
            along := (insert Node {
              title := title,
              addenable := true,
              assigned := (select Department filter .id = department_id),
          })}
        ) {along: {id, title}};\
        """,
        title=title,
        department_id=department_id,
        node_id=node_id,
    )
