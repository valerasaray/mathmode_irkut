# AUTOGENERATED FROM 'app/queries/get_notification_by_user.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetNotificationByUserResult(NoPydanticValidation):
    id: uuid.UUID
    user_to: GetNotificationByUserResultUserTo | None
    to_department: GetNotificationByUserResultToDepartment | None
    comment: GetNotificationByUserResultComment | None
    new_assign: GetNotificationByUserResultNewAssign | None
    passed_node: list[GetNotificationByUserResultPassedNodeItem]


@dataclasses.dataclass
class GetNotificationByUserResultComment(NoPydanticValidation):
    id: uuid.UUID
    text_str: str
    author: GetNotificationByUserResultUserTo | None
    answer: str | None


@dataclasses.dataclass
class GetNotificationByUserResultNewAssign(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetNotificationByUserResultPassedNodeItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetNotificationByUserResultToDepartment(NoPydanticValidation):
    id: uuid.UUID
    title: str


@dataclasses.dataclass
class GetNotificationByUserResultUserTo(NoPydanticValidation):
    id: uuid.UUID
    login: str
    rights: list[GetNotificationByUserResultUserToRightsItem]


@dataclasses.dataclass
class GetNotificationByUserResultUserToRightsItem(NoPydanticValidation):
    id: uuid.UUID
    value: str


async def get_notification_by_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    login: str,
) -> list[GetNotificationByUserResult]:
    return await executor.query(
        """\
        with login := <str>$login,
          user := (select User filter .login = login),
        select Notification {
          user_to: {
            id,
            login,
            rights: {value},
          },
          to_department: {
            id,
            title,
          },
          comment: {
            id,
            text_str,
            author: {
              id,
              login,
              rights: {value},
            },
            answer,
          },
          new_assign: {id},
          passed_node: {id},
        } filter .user_to = user;\
        """,
        login=login,
    )
