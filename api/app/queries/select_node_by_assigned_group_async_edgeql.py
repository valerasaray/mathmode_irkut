# AUTOGENERATED FROM 'app/queries/select_node_by_assigned_group.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SelectNodeByAssignedGroupResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    assigned: list[SelectNodeByAssignedGroupResultAssignedItem]
    along: SelectNodeByAssignedGroupResultAlong | None
    addenable: bool | None
    subs: list[SelectNodeByAssignedGroupResultSubsItem]
    next: SelectNodeByAssignedGroupResultNext | None
    customField: list[SelectNodeByAssignedGroupResultcustomFieldItem]
    status: SelectNodeByAssignedGroupResultStatus | None
    receipt: datetime.datetime | None


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultAlong(NoPydanticValidation):
    id: uuid.UUID
    title: str
    addenable: bool | None


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultAssignedItem(NoPydanticValidation):
    id: uuid.UUID
    title: str
    boss: SelectNodeByAssignedGroupResultAssignedItemBoss | None
    staff: list[SelectNodeByAssignedGroupResultAssignedItemBoss]


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultAssignedItemBoss(NoPydanticValidation):
    id: uuid.UUID
    login: str


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultNext(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultStatus(NoPydanticValidation):
    id: uuid.UUID
    title: str
    color: str


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultSubsItem(NoPydanticValidation):
    id: uuid.UUID
    title: str
    start_verification: datetime.datetime | None
    comments: list[SelectNodeByAssignedGroupResultSubsItemCommentsItem]
    fit: SelectNodeByAssignedGroupResultSubsItemFit | None
    end_verification: datetime.datetime | None
    end_correction: datetime.datetime | None


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultSubsItemCommentsItem(NoPydanticValidation):
    id: uuid.UUID
    text_str: str
    author: SelectNodeByAssignedGroupResultSubsItemCommentsItemAuthor | None
    answer: str | None


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultSubsItemCommentsItemAuthor(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultSubsItemFit(NoPydanticValidation):
    id: uuid.UUID
    login: str
    FIO: str | None
    rights: list[SelectNodeByAssignedGroupResultSubsItemFitRightsItem]


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultSubsItemFitRightsItem(NoPydanticValidation):
    id: uuid.UUID
    value: str


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultcustomFieldItem(NoPydanticValidation):
    id: uuid.UUID
    value: str
    titleField: SelectNodeByAssignedGroupResultcustomFieldItemtitleField | None


@dataclasses.dataclass
class SelectNodeByAssignedGroupResultcustomFieldItemtitleField(NoPydanticValidation):
    id: uuid.UUID
    value: str


async def select_node_by_assigned_group(
    executor: edgedb.AsyncIOExecutor,
    *,
    login: str,
) -> list[SelectNodeByAssignedGroupResult]:
    return await executor.query(
        """\
        with login := <str>$login,
          group_assigned := (
            select Department filter (.boss.login = login or .staff.login = login)
          )

        select Node {
          id,
          title,
          assigned: {
            id, 
            title, 
            boss: {id, login}, 
            staff: {id, login}},
            along: {
              id,
              title,
              addenable,
            },
            addenable,
            subs: {
              id, 
              title, 
              start_verification, 
              comments: {
                text_str,
                author,
                answer,
              },
              fit: {id, login, FIO, rights: {value}},
              end_verification,
              end_correction,
            },
            next: {id},
            customField: {
              value, 
              titleField: {value},
            },
            status: {title, color},
            receipt,
        } filter .assigned = group_assigned;\
        """,
        login=login,
    )
