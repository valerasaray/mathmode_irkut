# AUTOGENERATED FROM 'app/queries/create_comments_notification.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateCommentsNotificationResult(NoPydanticValidation):
    id: uuid.UUID
    comment: CreateCommentsNotificationResultComment | None


@dataclasses.dataclass
class CreateCommentsNotificationResultComment(NoPydanticValidation):
    id: uuid.UUID
    author: CreateCommentsNotificationResultCommentAuthor | None
    text_str: str
    answer: str | None


@dataclasses.dataclass
class CreateCommentsNotificationResultCommentAuthor(NoPydanticValidation):
    id: uuid.UUID
    login: str


async def create_comments_notification(
    executor: edgedb.AsyncIOExecutor,
    *,
    login: str,
    subnode_id: uuid.UUID,
    text_str: str,
) -> CreateCommentsNotificationResult:
    return await executor.query_single(
        """\
        with login := <str>$login,
          user := (select User filter .login = login),
          subnode_id := <uuid>$subnode_id,
          subnode := (select SubNode filter .id = subnode_id),
          text_str := <str>$text_str,

        select (
          insert Notification {
            comment := (
              insert Comment {
                text_str := text_str,
                author := user,
              }
            ),
            passed_node := (
              update Node
              filter (.subs = subnode)
              set {
                status := (select Status filter .color = "yellow"),
              }
            )
          }
        ) {id, comment: {id, author: {login}, text_str, answer}};\
        """,
        login=login,
        subnode_id=subnode_id,
        text_str=text_str,
    )
