# AUTOGENERATED FROM 'app/queries/get_node_by_id.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetNodeByIdResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    assigned: list[GetNodeByIdResultAssignedItem]
    along: GetNodeByIdResultAlong | None
    addenable: bool | None
    subs: list[GetNodeByIdResultSubsItem]
    next: GetNodeByIdResultNext | None
    customField: list[GetNodeByIdResultcustomFieldItem]
    status: GetNodeByIdResultStatus | None
    receipt: datetime.datetime | None


@dataclasses.dataclass
class GetNodeByIdResultAlong(NoPydanticValidation):
    id: uuid.UUID
    title: str
    addenable: bool | None


@dataclasses.dataclass
class GetNodeByIdResultAssignedItem(NoPydanticValidation):
    id: uuid.UUID
    title: str
    boss: GetNodeByIdResultAssignedItemBoss | None
    staff: list[GetNodeByIdResultAssignedItemBoss]


@dataclasses.dataclass
class GetNodeByIdResultAssignedItemBoss(NoPydanticValidation):
    id: uuid.UUID
    login: str


@dataclasses.dataclass
class GetNodeByIdResultNext(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetNodeByIdResultStatus(NoPydanticValidation):
    id: uuid.UUID
    title: str
    color: str


@dataclasses.dataclass
class GetNodeByIdResultSubsItem(NoPydanticValidation):
    id: uuid.UUID
    title: str
    start_verification: datetime.datetime | None
    comments: list[GetNodeByIdResultSubsItemCommentsItem]
    fit: GetNodeByIdResultSubsItemFit | None
    end_verification: datetime.datetime | None
    end_correction: datetime.datetime | None


@dataclasses.dataclass
class GetNodeByIdResultSubsItemCommentsItem(NoPydanticValidation):
    id: uuid.UUID
    text_str: str
    author: GetNodeByIdResultSubsItemCommentsItemAuthor | None
    answer: str | None


@dataclasses.dataclass
class GetNodeByIdResultSubsItemCommentsItemAuthor(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetNodeByIdResultSubsItemFit(NoPydanticValidation):
    id: uuid.UUID
    login: str
    rights: list[GetNodeByIdResultSubsItemFitRightsItem]


@dataclasses.dataclass
class GetNodeByIdResultSubsItemFitRightsItem(NoPydanticValidation):
    id: uuid.UUID
    value: str


@dataclasses.dataclass
class GetNodeByIdResultcustomFieldItem(NoPydanticValidation):
    id: uuid.UUID
    value: str
    titleField: GetNodeByIdResultcustomFieldItemtitleField | None


@dataclasses.dataclass
class GetNodeByIdResultcustomFieldItemtitleField(NoPydanticValidation):
    id: uuid.UUID
    value: str


async def get_node_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    node_id: uuid.UUID,
) -> GetNodeByIdResult | None:
    return await executor.query_single(
        """\
        select Node {
          id,
          title,
          assigned: {id, 
                    title, 
                    boss: {id, login}, 
                    staff: {id, login}},
          along: {
            id,
            title,
            addenable,
          },
          addenable,
          subs: {
            id, 
            title, 
            start_verification, 
            comments: {
              text_str,
              author,
              answer,
            },
            fit: {id, login, rights: {value}},
            end_verification,
            end_correction,
          },
          next: {id},
          customField: {
            value, 
            titleField: {value},
          },
          status: {title, color},
          receipt,
        } filter .id = <uuid>$node_id\
        """,
        node_id=node_id,
    )
